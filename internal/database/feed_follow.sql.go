// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed_follow.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH inserted AS
    (INSERT INTO feed_follows(id,created_at,updated_at,user_id,feed_id) VALUES(
        $1,
        $2,
        $3,
        $4,
        $5
    )RETURNING id, created_at, updated_at, user_id, feed_id
),
inserted_user AS(
    SELECT inserted.id, inserted.created_at, inserted.updated_at, inserted.user_id, inserted.feed_id,users.name AS user_name FROM
    inserted INNER JOIN
    users ON inserted.user_id = users.id
)
SELECT inserted_user.id, inserted_user.created_at, inserted_user.updated_at, inserted_user.user_id, inserted_user.feed_id, inserted_user.user_name,feeds.name AS feed_name FROM inserted_user
INNER JOIN feeds ON inserted_user.feed_id = feeds.id
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
	UserName  string
	FeedName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.UserName,
		&i.FeedName,
	)
	return i, err
}

const getFollowedFeeds = `-- name: GetFollowedFeeds :many
WITH follows AS(
    SELECT id, created_at, updated_at, user_id, feed_id FROM feed_follows WHERE feed_follows.user_id = $1
)
SELECT feeds.id, feeds.created_at, feeds.updated_at, feeds.name, feeds.url, feeds.user_id FROM follows INNER JOIN feeds ON follows.feed_id = feeds.id
`

func (q *Queries) GetFollowedFeeds(ctx context.Context, userID uuid.UUID) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getFollowedFeeds, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Url,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
